{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import print_function\n",
    "import torch as t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[0.0000, 0.0000, 0.0000],\n",
       "        [0.0000, 0.0000, 0.0000],\n",
       "        [0.0000, 0.0000, 0.0000],\n",
       "        [0.0000, 0.0000, 0.0000],\n",
       "        [0.0000, 0.0000, 0.0000]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#构建5*3矩阵，只分配了空间，未初始化\n",
    "x=t.Tensor(5,3)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[0.2200, 0.4989, 0.2124],\n",
       "        [0.9553, 0.5039, 0.9997],\n",
       "        [0.8233, 0.7881, 0.5307],\n",
       "        [0.6492, 0.0147, 0.6781],\n",
       "        [0.1006, 0.6423, 0.8716]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#使用【0，1】均匀分布随机初始化二维数组\n",
    "x=t.rand(5,3)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([5, 3])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(5, 3)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(x.size())#查看x的形状\n",
    "x.size()[0],x.size(1)#查看列的个数，两种写法等价"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[0.5520, 1.3132, 0.3151],\n",
       "        [1.5409, 1.2032, 1.7497],\n",
       "        [0.9886, 1.1178, 0.7196],\n",
       "        [1.4355, 0.2056, 1.3997],\n",
       "        [0.1324, 1.5621, 0.9224]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y=t.rand(5,3)\n",
    "#加法的第一种写法\n",
    "x+y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[0.5520, 1.3132, 0.3151],\n",
       "        [1.5409, 1.2032, 1.7497],\n",
       "        [0.9886, 1.1178, 0.7196],\n",
       "        [1.4355, 0.2056, 1.3997],\n",
       "        [0.1324, 1.5621, 0.9224]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#加法的第二种写法\n",
    "t.add(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[0.5520, 1.3132, 0.3151],\n",
       "        [1.5409, 1.2032, 1.7497],\n",
       "        [0.9886, 1.1178, 0.7196],\n",
       "        [1.4355, 0.2056, 1.3997],\n",
       "        [0.1324, 1.5621, 0.9224]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#加法的第三种写法：指定加法结果的输出目标为result\n",
    "result=t.Tensor(5,3)#预先分配空间\n",
    "t.add(x,y,out=result)#输入到result\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "最初y\n",
      "tensor([[0.3320, 0.8144, 0.1027],\n",
      "        [0.5856, 0.6992, 0.7500],\n",
      "        [0.1652, 0.3297, 0.1889],\n",
      "        [0.7863, 0.1909, 0.7217],\n",
      "        [0.0317, 0.9199, 0.0508]])\n",
      "第一种加法，y的结果\n",
      "tensor([[0.3320, 0.8144, 0.1027],\n",
      "        [0.5856, 0.6992, 0.7500],\n",
      "        [0.1652, 0.3297, 0.1889],\n",
      "        [0.7863, 0.1909, 0.7217],\n",
      "        [0.0317, 0.9199, 0.0508]])\n",
      "第二种加法，y的结果\n",
      "tensor([[0.5520, 1.3132, 0.3151],\n",
      "        [1.5409, 1.2032, 1.7497],\n",
      "        [0.9886, 1.1178, 0.7196],\n",
      "        [1.4355, 0.2056, 1.3997],\n",
      "        [0.1324, 1.5621, 0.9224]])\n"
     ]
    }
   ],
   "source": [
    "print('最初y')\n",
    "print(y)\n",
    "\n",
    "print('第一种加法，y的结果')\n",
    "y.add(x)#普通加法，不改变y的内容\n",
    "print(y)\n",
    "\n",
    "print('第二种加法，y的结果')\n",
    "y.add_(x)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x\n",
      "tensor([[0.2200, 0.4989, 0.2124],\n",
      "        [0.9553, 0.5039, 0.9997],\n",
      "        [0.8233, 0.7881, 0.5307],\n",
      "        [0.6492, 0.0147, 0.6781],\n",
      "        [0.1006, 0.6423, 0.8716]])\n",
      "x[:,1]\n",
      "tensor([0.4989, 0.5039, 0.7881, 0.0147, 0.6423])\n"
     ]
    }
   ],
   "source": [
    "#Tensor的选取操作与numpy类似\n",
    "print('x')\n",
    "print(x)\n",
    "print('x[:,1]')\n",
    "print(x[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([1., 1., 1., 1., 1.])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=t.ones(5)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1., 1., 1., 1.], dtype=float32)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b=a.numpy()#Tensor --> numpy\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1. 1. 1. 1. 1.]\n",
      "tensor([1., 1., 1., 1., 1.], dtype=torch.float64)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "a=np.ones(5)\n",
    "b=t.from_numpy(a)#numpy --> tensor\n",
    "print(a)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2. 2. 2. 2. 2.]\n",
      "tensor([2., 2., 2., 2., 2.], dtype=torch.float64)\n"
     ]
    }
   ],
   "source": [
    "b.add_(1)#以 _ 结尾的函数回修改自身\n",
    "print(a)\n",
    "print(b)#Tensor和numpy共享内存"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[0.7720, 1.8121, 0.5275],\n",
      "        [2.4963, 1.7071, 2.7494],\n",
      "        [1.8119, 1.9059, 1.2503],\n",
      "        [2.0846, 0.2204, 2.0778],\n",
      "        [0.2330, 2.2044, 1.7940]], device='cuda:0')\n"
     ]
    }
   ],
   "source": [
    "if t.cuda.is_available():\n",
    "    x=x.cuda()\n",
    "    y=y.cuda()\n",
    "    a=x+y\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[0.7720, 1.8121, 0.5275],\n",
       "        [2.4963, 1.7071, 2.7494],\n",
       "        [1.8119, 1.9059, 1.2503],\n",
       "        [2.0846, 0.2204, 2.0778],\n",
       "        [0.2330, 2.2044, 1.7940]], device='cuda:0')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1=x.cuda()\n",
    "y1=y.cuda()\n",
    "x1+y1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
